openapi: 3.0.3
info:
  title: oaexample
  version: 1.0.0
  description: oaexample
paths:
  /api/activity_log/:
    get:
      operationId: api_activity_log_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedActivityLogList'
          description: ''
    post:
      operationId: api_activity_log_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityLogRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ActivityLogRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ActivityLogRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityLog'
          description: ''
  /api/activity_log/{id}/:
    get:
      operationId: api_activity_log_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Activity Log.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityLog'
          description: ''
    put:
      operationId: api_activity_log_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Activity Log.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityLogRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ActivityLogRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ActivityLogRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityLog'
          description: ''
    patch:
      operationId: api_activity_log_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Activity Log.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedActivityLogRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedActivityLogRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedActivityLogRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityLog'
          description: ''
    delete:
      operationId: api_activity_log_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Activity Log.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/event/:
    get:
      operationId: api_event_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEventList'
          description: ''
    post:
      operationId: api_event_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EventRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EventRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
  /api/event/{id}/:
    get:
      operationId: api_event_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Event.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
    put:
      operationId: api_event_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Event.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EventRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EventRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
    patch:
      operationId: api_event_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Event.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEventRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEventRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEventRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
    delete:
      operationId: api_event_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Event.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/event_checkins/:
    get:
      operationId: api_event_checkins_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEventCheckinsList'
          description: ''
    post:
      operationId: api_event_checkins_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCheckinsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EventCheckinsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EventCheckinsRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventCheckins'
          description: ''
  /api/event_checkins/{id}/:
    get:
      operationId: api_event_checkins_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Event Checkin.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventCheckins'
          description: ''
    put:
      operationId: api_event_checkins_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Event Checkin.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCheckinsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EventCheckinsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EventCheckinsRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventCheckins'
          description: ''
    patch:
      operationId: api_event_checkins_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Event Checkin.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEventCheckinsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEventCheckinsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEventCheckinsRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventCheckins'
          description: ''
    delete:
      operationId: api_event_checkins_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Event Checkin.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/event_playlists/:
    get:
      operationId: api_event_playlists_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEventPlaylistsList'
          description: ''
    post:
      operationId: api_event_playlists_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventPlaylistsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EventPlaylistsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EventPlaylistsRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventPlaylists'
          description: ''
  /api/event_playlists/{id}/:
    get:
      operationId: api_event_playlists_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Event Playlist.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventPlaylists'
          description: ''
    put:
      operationId: api_event_playlists_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Event Playlist.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventPlaylistsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EventPlaylistsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EventPlaylistsRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventPlaylists'
          description: ''
    patch:
      operationId: api_event_playlists_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Event Playlist.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEventPlaylistsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEventPlaylistsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEventPlaylistsRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventPlaylists'
          description: ''
    delete:
      operationId: api_event_playlists_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Event Playlist.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/friendship/:
    get:
      operationId: api_friendship_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFriendshipList'
          description: ''
    post:
      operationId: api_friendship_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FriendshipRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FriendshipRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FriendshipRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Friendship'
          description: ''
  /api/friendship/{id}/:
    get:
      operationId: api_friendship_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Friendship.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Friendship'
          description: ''
    put:
      operationId: api_friendship_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Friendship.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FriendshipRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FriendshipRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FriendshipRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Friendship'
          description: ''
    patch:
      operationId: api_friendship_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Friendship.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFriendshipRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFriendshipRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFriendshipRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Friendship'
          description: ''
    delete:
      operationId: api_friendship_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Friendship.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/invites/:
    get:
      operationId: api_invites_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedInvitesList'
          description: ''
    post:
      operationId: api_invites_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitesRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InvitesRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InvitesRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invites'
          description: ''
  /api/invites/{id}/:
    get:
      operationId: api_invites_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Invite.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invites'
          description: ''
    put:
      operationId: api_invites_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Invite.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitesRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InvitesRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InvitesRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invites'
          description: ''
    patch:
      operationId: api_invites_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Invite.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedInvitesRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedInvitesRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedInvitesRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invites'
          description: ''
    delete:
      operationId: api_invites_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Invite.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/likes/:
    get:
      operationId: api_likes_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLikesList'
          description: ''
    post:
      operationId: api_likes_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LikesRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LikesRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LikesRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Likes'
          description: ''
  /api/likes/{id}/:
    get:
      operationId: api_likes_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Like.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Likes'
          description: ''
    put:
      operationId: api_likes_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Like.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LikesRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LikesRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LikesRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Likes'
          description: ''
    patch:
      operationId: api_likes_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Like.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedLikesRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedLikesRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedLikesRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Likes'
          description: ''
    delete:
      operationId: api_likes_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Like.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/playlist/:
    get:
      operationId: api_playlist_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPlaylistList'
          description: ''
    post:
      operationId: api_playlist_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaylistRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PlaylistRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PlaylistRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
          description: ''
  /api/playlist/{id}/:
    get:
      operationId: api_playlist_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Playlist.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
          description: ''
    put:
      operationId: api_playlist_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Playlist.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaylistRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PlaylistRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PlaylistRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
          description: ''
    patch:
      operationId: api_playlist_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Playlist.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPlaylistRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPlaylistRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPlaylistRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
          description: ''
    delete:
      operationId: api_playlist_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Playlist.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/playlist_songs/:
    get:
      operationId: api_playlist_songs_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPlaylistSongsList'
          description: ''
    post:
      operationId: api_playlist_songs_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaylistSongsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PlaylistSongsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PlaylistSongsRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistSongs'
          description: ''
  /api/playlist_songs/{id}/:
    get:
      operationId: api_playlist_songs_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Playlist Song.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistSongs'
          description: ''
    put:
      operationId: api_playlist_songs_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Playlist Song.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaylistSongsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PlaylistSongsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PlaylistSongsRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistSongs'
          description: ''
    patch:
      operationId: api_playlist_songs_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Playlist Song.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPlaylistSongsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPlaylistSongsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPlaylistSongsRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistSongs'
          description: ''
    delete:
      operationId: api_playlist_songs_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Playlist Song.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/song/:
    get:
      operationId: api_song_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSongList'
          description: ''
    post:
      operationId: api_song_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SongRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SongRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SongRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
          description: ''
  /api/song/{id}/:
    get:
      operationId: api_song_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Song.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
          description: ''
    put:
      operationId: api_song_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Song.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SongRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SongRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SongRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
          description: ''
    patch:
      operationId: api_song_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Song.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSongRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSongRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSongRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
          description: ''
    delete:
      operationId: api_song_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Song.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/song_requests/:
    get:
      operationId: api_song_requests_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSongRequestsList'
          description: ''
    post:
      operationId: api_song_requests_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SongRequestsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SongRequestsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SongRequestsRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongRequests'
          description: ''
  /api/song_requests/{id}/:
    get:
      operationId: api_song_requests_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Song Request.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongRequests'
          description: ''
    put:
      operationId: api_song_requests_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Song Request.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SongRequestsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SongRequestsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SongRequestsRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongRequests'
          description: ''
    patch:
      operationId: api_song_requests_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Song Request.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSongRequestsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSongRequestsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSongRequestsRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongRequests'
          description: ''
    delete:
      operationId: api_song_requests_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Song Request.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/user/:
    get:
      operationId: api_user_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
    post:
      operationId: api_user_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/user/{id}/:
    get:
      operationId: api_user_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: api_user_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: api_user_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: api_user_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/venue/:
    get:
      operationId: api_venue_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVenueList'
          description: ''
    post:
      operationId: api_venue_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VenueRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VenueRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VenueRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
          description: ''
  /api/venue/{id}/:
    get:
      operationId: api_venue_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Venue.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
          description: ''
    put:
      operationId: api_venue_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Venue.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VenueRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VenueRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VenueRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
          description: ''
    patch:
      operationId: api_venue_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Venue.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedVenueRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedVenueRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedVenueRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
          description: ''
    delete:
      operationId: api_venue_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Venue.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /connectors/{user_id}/spotify/artists/:
    get:
      operationId: connectors_spotify_artists_retrieve
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - connectors
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /connectors/{user_id}/spotify/playlists/:
    get:
      operationId: connectors_spotify_playlists_retrieve
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - connectors
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /connectors/{user_id}/spotify/search/:
    get:
      operationId: connectors_spotify_search_retrieve
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - connectors
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /connectors/spotify/auth/:
    get:
      operationId: connectors_spotify_auth_retrieve
      tags:
      - connectors
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /connectors/spotify/callback/:
    get:
      operationId: connectors_spotify_callback_retrieve
      tags:
      - connectors
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
components:
  schemas:
    ActivityEnum:
      enum:
      - requestsong
      - likesongrequest
      - checkin
      - leave
      type: string
      description: |-
        * `requestsong` - Request-song
        * `likesongrequest` - Like-song-request
        * `checkin` - Checkin
        * `leave` - Leave
    ActivityLog:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true
        activity:
          $ref: '#/components/schemas/ActivityEnum'
        last_notified:
          type: string
          format: date-time
        location:
          nullable: true
        author:
          type: integer
          nullable: true
        target_user:
          type: integer
          nullable: true
        target_song:
          type: integer
          nullable: true
        target_playlist:
          type: integer
          nullable: true
        target_event:
          type: integer
          nullable: true
        target_venue:
          type: integer
          nullable: true
      required:
      - activity
      - created
      - id
      - last_notified
      - modified
    ActivityLogRequest:
      type: object
      properties:
        activity:
          $ref: '#/components/schemas/ActivityEnum'
        last_notified:
          type: string
          format: date-time
        location:
          nullable: true
        author:
          type: integer
          nullable: true
        target_user:
          type: integer
          nullable: true
        target_song:
          type: integer
          nullable: true
        target_playlist:
          type: integer
          nullable: true
        target_event:
          type: integer
          nullable: true
        target_venue:
          type: integer
          nullable: true
      required:
      - activity
      - last_notified
    Event:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true
        slug:
          type: string
          nullable: true
          title: URL Alias
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        name:
          type: string
          maxLength: 255
        starts:
          type: string
          format: date-time
        ends:
          type: string
          format: date-time
        cover:
          type: string
          format: uri
          nullable: true
        description:
          type: string
        author:
          type: integer
          nullable: true
        cohosts:
          type: integer
          nullable: true
          title: Co-Hosts
        venue:
          type: integer
          nullable: true
      required:
      - created
      - description
      - ends
      - id
      - modified
      - name
      - starts
    EventCheckins:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true
        coordinate: {}
        status:
          $ref: '#/components/schemas/EventCheckinsStatusEnum'
        author:
          type: integer
          nullable: true
        venue:
          type: integer
          nullable: true
        event:
          type: integer
          nullable: true
      required:
      - coordinate
      - created
      - id
      - modified
    EventCheckinsRequest:
      type: object
      properties:
        coordinate: {}
        status:
          $ref: '#/components/schemas/EventCheckinsStatusEnum'
        author:
          type: integer
          nullable: true
        venue:
          type: integer
          nullable: true
        event:
          type: integer
          nullable: true
      required:
      - coordinate
    EventCheckinsStatusEnum:
      enum:
      - entered
      - left
      type: string
      description: |-
        * `entered` - Entered
        * `left` - Left
    EventPlaylists:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true
        order:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        author:
          type: integer
          nullable: true
        playlist:
          type: integer
          nullable: true
        event:
          type: integer
          nullable: true
      required:
      - created
      - id
      - modified
      - order
    EventPlaylistsRequest:
      type: object
      properties:
        order:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        author:
          type: integer
          nullable: true
        playlist:
          type: integer
          nullable: true
        event:
          type: integer
          nullable: true
      required:
      - order
    EventRequest:
      type: object
      properties:
        slug:
          type: string
          nullable: true
          title: URL Alias
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        name:
          type: string
          minLength: 1
          maxLength: 255
        starts:
          type: string
          format: date-time
        ends:
          type: string
          format: date-time
        cover:
          type: string
          format: binary
          nullable: true
        description:
          type: string
          minLength: 1
        author:
          type: integer
          nullable: true
        cohosts:
          type: integer
          nullable: true
          title: Co-Hosts
        venue:
          type: integer
          nullable: true
      required:
      - description
      - ends
      - name
      - starts
    Friendship:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true
        status:
          $ref: '#/components/schemas/FriendshipStatusEnum'
        author:
          type: integer
          nullable: true
        sender:
          type: integer
          nullable: true
        recipient:
          type: integer
          nullable: true
      required:
      - created
      - id
      - modified
    FriendshipRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/FriendshipStatusEnum'
        author:
          type: integer
          nullable: true
        sender:
          type: integer
          nullable: true
        recipient:
          type: integer
          nullable: true
    FriendshipStatusEnum:
      enum:
      - pending
      - accepted
      - declined
      - withdrawn
      type: string
      description: |-
        * `pending` - Pending
        * `accepted` - Accepted
        * `declined` - Declined
        * `withdrawn` - Withdrawn
    Invites:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true
        status:
          $ref: '#/components/schemas/InvitesStatusEnum'
        author:
          type: integer
          nullable: true
        sender:
          type: integer
          nullable: true
        recipient:
          type: integer
          nullable: true
        event:
          type: integer
          nullable: true
      required:
      - created
      - id
      - modified
    InvitesRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/InvitesStatusEnum'
        author:
          type: integer
          nullable: true
        sender:
          type: integer
          nullable: true
        recipient:
          type: integer
          nullable: true
        event:
          type: integer
          nullable: true
    InvitesStatusEnum:
      enum:
      - invited
      - accepted
      - declined
      - withdrawn
      type: string
      description: |-
        * `invited` - Invited
        * `accepted` - Accepted
        * `declined` - Declined
        * `withdrawn` - Withdrawn
    Likes:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true
        type:
          $ref: '#/components/schemas/TypeEnum'
        author:
          type: integer
          nullable: true
        song:
          type: integer
          nullable: true
        event:
          type: integer
          nullable: true
        playlist:
          type: integer
          nullable: true
      required:
      - created
      - id
      - modified
      - type
    LikesRequest:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/TypeEnum'
        author:
          type: integer
          nullable: true
        song:
          type: integer
          nullable: true
        event:
          type: integer
          nullable: true
        playlist:
          type: integer
          nullable: true
      required:
      - type
    PaginatedActivityLogList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ActivityLog'
    PaginatedEventCheckinsList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/EventCheckins'
    PaginatedEventList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Event'
    PaginatedEventPlaylistsList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/EventPlaylists'
    PaginatedFriendshipList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Friendship'
    PaginatedInvitesList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Invites'
    PaginatedLikesList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Likes'
    PaginatedPlaylistList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Playlist'
    PaginatedPlaylistSongsList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/PlaylistSongs'
    PaginatedSongList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Song'
    PaginatedSongRequestsList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/SongRequests'
    PaginatedUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PaginatedVenueList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Venue'
    PatchedActivityLogRequest:
      type: object
      properties:
        activity:
          $ref: '#/components/schemas/ActivityEnum'
        last_notified:
          type: string
          format: date-time
        location:
          nullable: true
        author:
          type: integer
          nullable: true
        target_user:
          type: integer
          nullable: true
        target_song:
          type: integer
          nullable: true
        target_playlist:
          type: integer
          nullable: true
        target_event:
          type: integer
          nullable: true
        target_venue:
          type: integer
          nullable: true
    PatchedEventCheckinsRequest:
      type: object
      properties:
        coordinate: {}
        status:
          $ref: '#/components/schemas/EventCheckinsStatusEnum'
        author:
          type: integer
          nullable: true
        venue:
          type: integer
          nullable: true
        event:
          type: integer
          nullable: true
    PatchedEventPlaylistsRequest:
      type: object
      properties:
        order:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        author:
          type: integer
          nullable: true
        playlist:
          type: integer
          nullable: true
        event:
          type: integer
          nullable: true
    PatchedEventRequest:
      type: object
      properties:
        slug:
          type: string
          nullable: true
          title: URL Alias
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        name:
          type: string
          minLength: 1
          maxLength: 255
        starts:
          type: string
          format: date-time
        ends:
          type: string
          format: date-time
        cover:
          type: string
          format: binary
          nullable: true
        description:
          type: string
          minLength: 1
        author:
          type: integer
          nullable: true
        cohosts:
          type: integer
          nullable: true
          title: Co-Hosts
        venue:
          type: integer
          nullable: true
    PatchedFriendshipRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/FriendshipStatusEnum'
        author:
          type: integer
          nullable: true
        sender:
          type: integer
          nullable: true
        recipient:
          type: integer
          nullable: true
    PatchedInvitesRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/InvitesStatusEnum'
        author:
          type: integer
          nullable: true
        sender:
          type: integer
          nullable: true
        recipient:
          type: integer
          nullable: true
        event:
          type: integer
          nullable: true
    PatchedLikesRequest:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/TypeEnum'
        author:
          type: integer
          nullable: true
        song:
          type: integer
          nullable: true
        event:
          type: integer
          nullable: true
        playlist:
          type: integer
          nullable: true
    PatchedPlaylistRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        bio:
          type: string
          nullable: true
          maxLength: 255
        image:
          type: string
          format: binary
          nullable: true
        author:
          type: integer
          nullable: true
    PatchedPlaylistSongsRequest:
      type: object
      properties:
        order:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        likes_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
          title: Likes
        match_score:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        author:
          type: integer
          nullable: true
        playlist:
          type: integer
          nullable: true
        song:
          type: integer
          nullable: true
    PatchedSongRequest:
      type: object
      properties:
        spotify_id:
          type: string
          nullable: true
          maxLength: 255
        apple_id:
          type: string
          nullable: true
          maxLength: 255
        name:
          type: string
          minLength: 1
          maxLength: 255
        artist:
          type: string
          nullable: true
          maxLength: 255
        cover:
          type: string
          format: binary
          nullable: true
        author:
          type: integer
          nullable: true
    PatchedSongRequestsRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/SongRequestsStatusEnum'
        author:
          type: integer
          nullable: true
        song:
          type: integer
          nullable: true
        event:
          type: integer
          nullable: true
        playlist:
          type: integer
          nullable: true
    PatchedUserRequest:
      type: object
      properties:
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        locale:
          type: string
          nullable: true
          maxLength: 255
        profile_picture:
          type: string
          format: binary
          nullable: true
        avatar:
          type: string
          format: binary
        phone:
          type: string
          nullable: true
          maxLength: 16
    PatchedVenueRequest:
      type: object
      properties:
        slug:
          type: string
          minLength: 1
          title: URL Alias
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          minLength: 1
        cover:
          type: string
          format: binary
          nullable: true
        bounding_box: {}
        address:
          type: string
          minLength: 1
          maxLength: 255
        privacy:
          $ref: '#/components/schemas/PrivacyEnum'
        author:
          type: integer
          nullable: true
        managers:
          type: integer
          nullable: true
    Playlist:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 255
        bio:
          type: string
          nullable: true
          maxLength: 255
        image:
          type: string
          format: uri
          nullable: true
        author:
          type: integer
          nullable: true
      required:
      - created
      - id
      - modified
      - name
    PlaylistRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        bio:
          type: string
          nullable: true
          maxLength: 255
        image:
          type: string
          format: binary
          nullable: true
        author:
          type: integer
          nullable: true
      required:
      - name
    PlaylistSongs:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true
        order:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        likes_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
          title: Likes
        match_score:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        author:
          type: integer
          nullable: true
        playlist:
          type: integer
          nullable: true
        song:
          type: integer
          nullable: true
      required:
      - created
      - id
      - modified
      - order
    PlaylistSongsRequest:
      type: object
      properties:
        order:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        likes_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
          title: Likes
        match_score:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        author:
          type: integer
          nullable: true
        playlist:
          type: integer
          nullable: true
        song:
          type: integer
          nullable: true
      required:
      - order
    PrivacyEnum:
      enum:
      - public
      - unlisted
      - inviteonly
      type: string
      description: |-
        * `public` - Public
        * `unlisted` - Unlisted
        * `inviteonly` - Invite-only
    Song:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true
        spotify_id:
          type: string
          nullable: true
          maxLength: 255
        apple_id:
          type: string
          nullable: true
          maxLength: 255
        name:
          type: string
          maxLength: 255
        artist:
          type: string
          nullable: true
          maxLength: 255
        cover:
          type: string
          format: uri
          nullable: true
        author:
          type: integer
          nullable: true
      required:
      - created
      - id
      - modified
      - name
    SongRequest:
      type: object
      properties:
        spotify_id:
          type: string
          nullable: true
          maxLength: 255
        apple_id:
          type: string
          nullable: true
          maxLength: 255
        name:
          type: string
          minLength: 1
          maxLength: 255
        artist:
          type: string
          nullable: true
          maxLength: 255
        cover:
          type: string
          format: binary
          nullable: true
        author:
          type: integer
          nullable: true
      required:
      - name
    SongRequests:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true
        status:
          $ref: '#/components/schemas/SongRequestsStatusEnum'
        author:
          type: integer
          nullable: true
        song:
          type: integer
          nullable: true
        event:
          type: integer
          nullable: true
        playlist:
          type: integer
          nullable: true
      required:
      - created
      - id
      - modified
    SongRequestsRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/SongRequestsStatusEnum'
        author:
          type: integer
          nullable: true
        song:
          type: integer
          nullable: true
        event:
          type: integer
          nullable: true
        playlist:
          type: integer
          nullable: true
    SongRequestsStatusEnum:
      enum:
      - requested
      - accepted
      - declined
      - withdrawn
      type: string
      description: |-
        * `requested` - Requested
        * `accepted` - Accepted
        * `declined` - Declined
        * `withdrawn` - Withdrawn
    TypeEnum:
      enum:
      - song
      - event
      - playlist
      - request
      type: string
      description: |-
        * `song` - Song
        * `event` - Event
        * `playlist` - Playlist
        * `request` - Request
    User:
      type: object
      properties:
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        locale:
          type: string
          nullable: true
          maxLength: 255
        profile_picture:
          type: string
          format: uri
          nullable: true
        avatar:
          type: string
          format: uri
        phone:
          type: string
          nullable: true
          maxLength: 16
    UserRequest:
      type: object
      properties:
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        locale:
          type: string
          nullable: true
          maxLength: 255
        profile_picture:
          type: string
          format: binary
          nullable: true
        avatar:
          type: string
          format: binary
        phone:
          type: string
          nullable: true
          maxLength: 16
    Venue:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true
        slug:
          type: string
          title: URL Alias
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        name:
          type: string
          maxLength: 255
        description:
          type: string
        cover:
          type: string
          format: uri
          nullable: true
        bounding_box: {}
        address:
          type: string
          maxLength: 255
        privacy:
          $ref: '#/components/schemas/PrivacyEnum'
        author:
          type: integer
          nullable: true
        managers:
          type: integer
          nullable: true
      required:
      - address
      - bounding_box
      - created
      - description
      - id
      - modified
      - name
    VenueRequest:
      type: object
      properties:
        slug:
          type: string
          minLength: 1
          title: URL Alias
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          minLength: 1
        cover:
          type: string
          format: binary
          nullable: true
        bounding_box: {}
        address:
          type: string
          minLength: 1
          maxLength: 255
        privacy:
          $ref: '#/components/schemas/PrivacyEnum'
        author:
          type: integer
          nullable: true
        managers:
          type: integer
          nullable: true
      required:
      - address
      - bounding_box
      - description
      - name
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
